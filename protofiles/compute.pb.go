// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: protofiles/compute.proto

package computepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MinMaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *MinMaxRequest) Reset() {
	*x = MinMaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinMaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxRequest) ProtoMessage() {}

func (x *MinMaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxRequest.ProtoReflect.Descriptor instead.
func (*MinMaxRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{0}
}

func (x *MinMaxRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type MinMaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum int32 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int32 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *MinMaxResponse) Reset() {
	*x = MinMaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinMaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxResponse) ProtoMessage() {}

func (x *MinMaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxResponse.ProtoReflect.Descriptor instead.
func (*MinMaxResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{1}
}

func (x *MinMaxResponse) GetMinimum() int32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *MinMaxResponse) GetMaximum() int32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

type FibonacciRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *FibonacciRequest) Reset() {
	*x = FibonacciRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciRequest) ProtoMessage() {}

func (x *FibonacciRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciRequest.ProtoReflect.Descriptor instead.
func (*FibonacciRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{2}
}

func (x *FibonacciRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type FibonacciResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fib int32 `protobuf:"varint,1,opt,name=fib,proto3" json:"fib,omitempty"`
}

func (x *FibonacciResponse) Reset() {
	*x = FibonacciResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciResponse) ProtoMessage() {}

func (x *FibonacciResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciResponse.ProtoReflect.Descriptor instead.
func (*FibonacciResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{3}
}

func (x *FibonacciResponse) GetFib() int32 {
	if x != nil {
		return x.Fib
	}
	return 0
}

type EncryptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pt string `protobuf:"bytes,1,opt,name=pt,proto3" json:"pt,omitempty"`
}

func (x *EncryptionRequest) Reset() {
	*x = EncryptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionRequest) ProtoMessage() {}

func (x *EncryptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionRequest.ProtoReflect.Descriptor instead.
func (*EncryptionRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{4}
}

func (x *EncryptionRequest) GetPt() string {
	if x != nil {
		return x.Pt
	}
	return ""
}

type EncryptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ct string `protobuf:"bytes,1,opt,name=ct,proto3" json:"ct,omitempty"`
}

func (x *EncryptionResponse) Reset() {
	*x = EncryptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionResponse) ProtoMessage() {}

func (x *EncryptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionResponse.ProtoReflect.Descriptor instead.
func (*EncryptionResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_compute_proto_rawDescGZIP(), []int{5}
}

func (x *EncryptionResponse) GetCt() string {
	if x != nil {
		return x.Ct
	}
	return ""
}

var File_protofiles_compute_proto protoreflect.FileDescriptor

var file_protofiles_compute_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x0e,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x22, 0x20, 0x0a, 0x10, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x6e, 0x22, 0x25, 0x0a, 0x11, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x69, 0x62, 0x22, 0x23, 0x0a, 0x11, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x74,
	0x22, 0x24, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x63, 0x74, 0x32, 0xe0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x12, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x46, 0x0a, 0x09, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x12, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63,
	0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x16, 0x5a, 0x14, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protofiles_compute_proto_rawDescOnce sync.Once
	file_protofiles_compute_proto_rawDescData = file_protofiles_compute_proto_rawDesc
)

func file_protofiles_compute_proto_rawDescGZIP() []byte {
	file_protofiles_compute_proto_rawDescOnce.Do(func() {
		file_protofiles_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_protofiles_compute_proto_rawDescData)
	})
	return file_protofiles_compute_proto_rawDescData
}

var file_protofiles_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protofiles_compute_proto_goTypes = []interface{}{
	(*MinMaxRequest)(nil),      // 0: compute.MinMaxRequest
	(*MinMaxResponse)(nil),     // 1: compute.MinMaxResponse
	(*FibonacciRequest)(nil),   // 2: compute.FibonacciRequest
	(*FibonacciResponse)(nil),  // 3: compute.FibonacciResponse
	(*EncryptionRequest)(nil),  // 4: compute.EncryptionRequest
	(*EncryptionResponse)(nil), // 5: compute.EncryptionResponse
}
var file_protofiles_compute_proto_depIdxs = []int32{
	4, // 0: compute.ComputeService.Encrypt:input_type -> compute.EncryptionRequest
	0, // 1: compute.ComputeService.MinMaxSum:input_type -> compute.MinMaxRequest
	2, // 2: compute.ComputeService.Fibonacci:input_type -> compute.FibonacciRequest
	5, // 3: compute.ComputeService.Encrypt:output_type -> compute.EncryptionResponse
	1, // 4: compute.ComputeService.MinMaxSum:output_type -> compute.MinMaxResponse
	3, // 5: compute.ComputeService.Fibonacci:output_type -> compute.FibonacciResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protofiles_compute_proto_init() }
func file_protofiles_compute_proto_init() {
	if File_protofiles_compute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protofiles_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinMaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinMaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protofiles_compute_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_compute_proto_goTypes,
		DependencyIndexes: file_protofiles_compute_proto_depIdxs,
		MessageInfos:      file_protofiles_compute_proto_msgTypes,
	}.Build()
	File_protofiles_compute_proto = out.File
	file_protofiles_compute_proto_rawDesc = nil
	file_protofiles_compute_proto_goTypes = nil
	file_protofiles_compute_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeServiceClient interface {
	//Unary RPC
	Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	//Client Streaming
	MinMaxSum(ctx context.Context, opts ...grpc.CallOption) (ComputeService_MinMaxSumClient, error)
	//Server Streaming
	Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (ComputeService_FibonacciClient, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, "/compute.ComputeService/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) MinMaxSum(ctx context.Context, opts ...grpc.CallOption) (ComputeService_MinMaxSumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ComputeService_serviceDesc.Streams[0], "/compute.ComputeService/MinMaxSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceMinMaxSumClient{stream}
	return x, nil
}

type ComputeService_MinMaxSumClient interface {
	Send(*MinMaxRequest) error
	CloseAndRecv() (*MinMaxResponse, error)
	grpc.ClientStream
}

type computeServiceMinMaxSumClient struct {
	grpc.ClientStream
}

func (x *computeServiceMinMaxSumClient) Send(m *MinMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeServiceMinMaxSumClient) CloseAndRecv() (*MinMaxResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MinMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeServiceClient) Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (ComputeService_FibonacciClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ComputeService_serviceDesc.Streams[1], "/compute.ComputeService/Fibonacci", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceFibonacciClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComputeService_FibonacciClient interface {
	Recv() (*FibonacciResponse, error)
	grpc.ClientStream
}

type computeServiceFibonacciClient struct {
	grpc.ClientStream
}

func (x *computeServiceFibonacciClient) Recv() (*FibonacciResponse, error) {
	m := new(FibonacciResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeServiceServer is the server API for ComputeService service.
type ComputeServiceServer interface {
	//Unary RPC
	Encrypt(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	//Client Streaming
	MinMaxSum(ComputeService_MinMaxSumServer) error
	//Server Streaming
	Fibonacci(*FibonacciRequest, ComputeService_FibonacciServer) error
}

// UnimplementedComputeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (*UnimplementedComputeServiceServer) Encrypt(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedComputeServiceServer) MinMaxSum(ComputeService_MinMaxSumServer) error {
	return status.Errorf(codes.Unimplemented, "method MinMaxSum not implemented")
}
func (*UnimplementedComputeServiceServer) Fibonacci(*FibonacciRequest, ComputeService_FibonacciServer) error {
	return status.Errorf(codes.Unimplemented, "method Fibonacci not implemented")
}

func RegisterComputeServiceServer(s *grpc.Server, srv ComputeServiceServer) {
	s.RegisterService(&_ComputeService_serviceDesc, srv)
}

func _ComputeService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compute.ComputeService/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Encrypt(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_MinMaxSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServiceServer).MinMaxSum(&computeServiceMinMaxSumServer{stream})
}

type ComputeService_MinMaxSumServer interface {
	SendAndClose(*MinMaxResponse) error
	Recv() (*MinMaxRequest, error)
	grpc.ServerStream
}

type computeServiceMinMaxSumServer struct {
	grpc.ServerStream
}

func (x *computeServiceMinMaxSumServer) SendAndClose(m *MinMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeServiceMinMaxSumServer) Recv() (*MinMaxRequest, error) {
	m := new(MinMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ComputeService_Fibonacci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServiceServer).Fibonacci(m, &computeServiceFibonacciServer{stream})
}

type ComputeService_FibonacciServer interface {
	Send(*FibonacciResponse) error
	grpc.ServerStream
}

type computeServiceFibonacciServer struct {
	grpc.ServerStream
}

func (x *computeServiceFibonacciServer) Send(m *FibonacciResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ComputeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compute.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _ComputeService_Encrypt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MinMaxSum",
			Handler:       _ComputeService_MinMaxSum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Fibonacci",
			Handler:       _ComputeService_Fibonacci_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/compute.proto",
}
